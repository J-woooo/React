리덕스: 리액트 상태 관리 라이브러리
- 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜서 효율적으로 관리 가능
- 컴포넌트끼리 똑같은 상태를 공유해야 할 때도 여러 컴포넌트를 거치지 않고 상태전달, 업데이트 가능
- 전역상태를 관리할 때 매우 효과적
- 프로젝트 규모가 큰 경우에는 리덕스를 사용하는 편이 좋다. 유지보수성, 작업 효율 up
- 미들웨어라는 기능을 제공하여 비동기 작업을 효율적으로 관리할 수 있게 해준다.


1. 액션: 
- 상태에 변화가 필요하면 발생. 
- type 필드(=이름)를 반드시 가지고 있어야 함
- 액션을 만들어주는 액션 생성함수가 있다.
- 변화를 일으켜야 할 때마다 액션 객체를 만들어야 하는데 함수로 만들어서 관리한다.
- 액션의 이름은 고유해야 한다. 중복되면 충돌 발생. 

2. 리듀서: 변화를 일으키는 함수. 
- 액션을 만들어서 발생시키면 
- 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아온다. 
- 두 값을 참고하여 새로운 상태를 만들어서 반환해준다.
- 상태의 불변성을 유지하면서 데이터에 변화를 준다. (spread 연산자 사용 ...)


3. 스토어
- 프로젝트에 리덕스를 적용하기 위해 스토어를 만듬. 
- 하나의 프로젝트에 하나의 스토어만 가능
- 현재 애플리케이션 상태와 리듀서가, 이외 내장함수가 들어있다.

4. 디스패치 
- 스토어의 내장함수 중 하나
- 액션을 발생시키는 것 
- 액션 객체를 파라미터로 호출 dispatch(action)
- 디스패치 함수가 호출되면 스토어가 리듀서 함수를 실행시켜서 새로운 함수를 만들어 준다.

5. 구독
- 스토어의 내장함수 중 하나 dispatch 사용
- subscribe 함수 안에 리스너 함수를 파라미터로 호출해서 넣어준다.
- 그러면 리스너 함수가 액션이 디스패치되어 상태가 업데이트 될 때마다 호출됨.
- dispatch

리덕스 프로젝트에서 사용할 때 지켜야 하는 세 가지 규칙
- 단일 스토어
- 읽기 전용 상태: 리덕스는 읽기 전용이다. 기존에 리액트에서 setState를 사용하여 state 업데이트를 할 때 불면성을 지켜주기
위해 spread 연산자나 immer를 사용했듯이 기존의 객체를 건드리지 않고 새로운 객체를 생성해 주어야 한다.
불변성을 유지해야 하는 이유는 내부적으로 데이터라 변경되는 것을 감지하기 위해 얕은 비교 검사를 하기 때문이다.
- 리듀서는 순수한 함수: 변화를 일으키는 리듀서는 순수한 함수여야 한다.
리듀서 함수는 이전 상태와 액션 객첼르 파라미터로 받는다.
파라미터 외의 값에는 의존하면 안된다.
이전 상태는 절대로 건드리지 않고 변화를 준 새로운 상태 객체를 만들어 반환한다.
똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 한다.


