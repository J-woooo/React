1. 리액트에서 리덕스를 사용하면 좋은점
- 상태 업데이트에 관한 로직을  따로 분리하여 컴포넌트 파일과 별개로  관리 가능
- 여러 컴포넌트에서 동일한 상태를 공유해야 할 때 유용
- 업데이트가 필요한 컴포넌트만 리렌더링 되도록 최적화 가능

store.dispatch	->	connect
store.subscribe	->	Provider

가장 많이 사용하는 패턴: 프레젠테이셔널 컴포넌트와 컨테이너 컴포넌트를 분리
프레젠테이셔널 컴포넌트: 상태 관리가 이루어지지 않고, props를 받아 와서 UI에 보여준믄 컴포넌트
컨테이너 컴포넌트: 리덕스와 연동되어 상태를 받아오거나 스토어에 액션을 디스패치하는 컴포넌트 

Ducks 방식: 액션 타입, 액션 생성 함수, 리듀서 함수를 기능별로 파일 하나에 몰아서 작성하는 방식
Ducks 패턴으로 몰아서 작성한 코드를 모듈이라고 한다

- 리덕스 관련 코드 작성하는법
1. 액션 타입 정의
2. 액션 생성함수 만들기 => createAction으로 쉽게 작성 가능, 액션에 필요한 추가 데이터 = payload
3. 초기 상태 및 리듀서 함수 만들기 => handleAction으로 쉽게 작성 가능
4. 루트 리듀서 만들기

- 리액스 애플리케이션에 리덕스 적용하기
1. 스토어 생성
2. Provider 컴포넌트를 사용하여 리덕스 적용
3. Redux Devtools 적용

- 컨테이너 컴포넌트 만들기 
컨테이너 컴포넌트 = 리덕스 스토어와 연동된 컴포넌트
컴포넌트에서 리덕스 스토어에 접근하여 원하는 상태를 받아오고 액션도 디스패치
컴포넌트를 리덕스와 연동하려면 connect 함수 사용 (react-redux 제공)
const makeContatiner = connect(mapStateToProps, mapDispatchToProps);
makeContainer(TargetComponent)
mapStateToProps: 리덕스 스토어 안의 상태를 컴포넌트의 prop로 넘겨주기 위해 설정
-> state(현재 스토어가 지니고 있는 상태)를 파라미터로 받아온다.
mapDispatchToProps: 액션 생성 함수를 컴포넌트의 props로 넘겨주기 위해 사용
->dispatch()를 파라미터로 받아온다.

- bindActionCreators 함수: 
액션을 디스패치하기 위해 각 액션 생성 함수를 호출하고 dispatch로 감싸는 작업을 편하게 만들어줌
or 아예 객체 형태로 매개 변수를 넣으면 connect 함수가 내부적으로 작업 수행

- Hooks를 사용하여 리덕스 스토어와 연동되는 컨테이너 컴포넌트를 만들 수 있다.
useSelector Hook: connect함수 대신 리덕스의 상태를 조회할 수 있다.
->const 결과 = useSelector(상태 선택 함수);

useDispatch Hook: 컴포넌트에서 액션을 디스패치해야할 때 사용

useStore Hook: 컴포넌트 내부에서 리덕스 스토어 객체를 직접 사용
->컴포넌트에서 어쩌다가 스토어에 직접 접근해야 하는 상황에만 사용

useActions Hook: 
- 여러 개의 액션을 사용해야 하는 경우 코드를 깔끔하게 정리 가능
- 액션 생성 함수를 액션을 디스패치하는 함수로 변환해 줌
파라미터: (액션 생성함수로 이루어진 배열, deps배열) 
- deps 배열 안에 있는 원소가 바뀌면 액션을 디스패치하는 함수를 새로 만든다.



