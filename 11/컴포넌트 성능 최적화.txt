컴포넌트가 리렌더링이 발생할 때
1. 자신이 전달받은 props가 변경될 때
2. 자신의 state가 바뀔 때
3. 부모 컴포넌트가 리렌더링될 때
4. forceUpdate 함수가 실행될 때

- 함수형 컴포넌트의 리렌더링을 방지할 때 React.memo를 사용한다.
React.memo: 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정
--> export 할 때 감싸준다.

- useState의 함수형 업데이트
어떻게 업데이트할지 정의해주는 업데이트 함수를 넣어준다.
두 번째 파라미터로 넣는 배열에 number를 넣지 않아도 됨.

- 함수형 업데이트 대신 useReducer 사용
두 번째 파라미터에 초기 상태를 넣어 준다.
두 번째에 undefined, 세 번째에 초기 상태를 만드는 함수를 넣어주면 맨 처음 렌더링에만 함수 호출\
useReducer 사용 시 상태 업데이트 로직을 모아서 컴포넌트 바깥에 둘 수 있다는 장점이 있다.
성능은 비슷

- 불변성: 기존의 값을 수정하지 않으면서 새로운 값을 만들어 내는 것 = 불변성을 지킨다.
불변성이 지켜지지 않으면 객체 내부 값의 변경 감지 불가 -> React.memo 판단 불가능

- react-virtualized 렌더링 최적화
리스트 컴포넌트에서 스크롤되기 전에 보이지 않는 컴포넌트는 렌더링하지 않고 크기만 차지하게 함
만약 스크롤 되면 해당 스크롤 위치에서 보여줘야 할 컴포넌트를 렌더링하여 자원을 아낀다. 
index, key, style 값을 객체 타입을 받아와 rowRenderer 함수 작성 -> TodoItem 렌더링에 사용
이 함수를 List 컴포넌트의 props로 설정한다. (리스트 전체크기, 항목당 높이, 렌더링 함수, 배열)




